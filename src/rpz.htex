\documentclass[russian,utf8,emptystyle]{eskdtext}

\usepackage[T2A,T1]{fontenc}

\newcommand{\No}{\textnumero} % костыль для фикса ошибки

\ESKDdepartment{Федеральное государственное бюджетное образовательное учреждение высшего профессионального образования}
\ESKDcompany{Московский государственный технический университет им. Н. Э. Баумана}
\ESKDclassCode{23 0102}
\ESKDtitle{АИС отслеживания и прогнозирования новостных потоков «Волхв»}
\ESKDdocName{Расчетно-пояснительная записка}
\ESKDauthor{Гуща~А.~В.}
\ESKDtitleApprovedBy{~}{~\underline{\hspace{2.5cm}}}
\ESKDtitleAgreedBy{~}{~\underline{\hspace{2.5cm}}}
\ESKDtitleDesignedBy{Студент группы ИУ5-122}{Гуща~А.~В}

\usepackage{multirow}
\usepackage{tabularx}
\usepackage{tabularx,ragged2e}
\usepackage{pdfpages}
\renewcommand\tabularxcolumn[1]{>{\Centering}p{#1}}
\newcommand\abs[1]{\left|#1\right|}

\usepackage{longtable,tabu}

\usepackage{geometry}
\geometry{footskip = 1cm}

\pagenumbering{arabic}
\pagestyle{plain}

\usepackage{setspace}

\usepackage{xcolor}
\usepackage{listings}
\lstset{
    breaklines=true,
    postbreak=\raisebox{0ex}[0ex][0ex]{\ensuremath{\color{red}\hookrightarrow\space}},
    extendedchars=\true,
    basicstyle=\small,
    inputencoding=utf8
}

\ESKDsectAlign{section}{Center} % to capitalize russian text

\usepackage{array}
\newcolumntype{L}[1]{>{\raggedright\let\newline\\\arraybackslash\hspace{0pt}}m{#1}}
\newcolumntype{C}[1]{>{\centering\let\newline\\\arraybackslash\hspace{0pt}}m{#1}}
\newcolumntype{R}[1]{>{\raggedleft\let\newline\\\arraybackslash\hspace{0pt}}m{#1}}

\begin{haskellpragmas}
{-# LANGUAGE OverloadedStrings #-}
\end{haskellpragmas}
\begin{writehaskell}
import Text.LaTeX
import Text.LaTeX.Base.Class
import Data.Text (pack, Text)
import Text.Printf

showt :: Show a => a -> Text
showt = pack . show 

showr :: (Show a, LaTeXC l) => a -> l
showr = raw . showt 

showf :: LaTeXC l => Float -> l 
showf = raw . pack . printf "%.2f"

\end{writehaskell}

%===========================================================================
\begin{document}

\clearpage
\clearpage

\section{Часть 1}
\section{Часть 2}
\section{Часть 3}

%===========================================================================
\newpage
\section{Организационно -- Экономическая часть}
\subsection{Определение этапов и содержания работ}

Планирование длительности этапов и содержания работ осуществляется в соответствии с ГОСТ 19.102-77. На стадии разработки технического задания были определены стадии и этапы работ указанные в таблице~\ref{table:org_stages}.

\begin{table}[h!]
\centering
\caption{Стадии разработки и этапы работ}
\label{table:org_stages}
\begin{tabular}{C{4cm}|L{5cm}|L{7cm}}
\multicolumn{1}{c|}{Стадия разработки} & 
\multicolumn{1}{c|}{Этап работ} & 
\multicolumn{1}{c}{Содержание работ} \\
\hline\hline
1. Техническое задание &  Разработка и утверждение технического задания & Определение требований 
к ПО. Определение стадий, этапов и сроков разработки программы и документации на неё.  \\
\hline
2. Технический проект  &  Научно – исследовательские работы &  Выбор и обоснование технологий для реализации. \\
                       &  Разработка технического проекта & Разработка структуры программы. \\
                       &  Утверждение технического проекта & Разработка расчетно – пояснительной записки. Согласование и утверждение технического проекта. \\
\hline
3. Рабочий проект      &  Разработка программы & Программирование и отладка программы \\
\end{tabular}
\end{table}

\subsection{Расчет трудоемкости проекта}

Определим вероятные трудозатраты на выполнение данного проекта. Определим их с помощью экспертных оценок. Результат экспертных оценок представлен в таблице~\ref{table:org_experts}.

\begin{writehaskell}
-- | Массив оценок экспертов
experts :: [Int]
experts = [201, 141, 193, 180]

-- | Табличка с эксперт-часы
expertsTabular :: LaTeX
expertsTabular = tabular (Just Center) [CenterColumn, VerticalLine, CenterColumn] (
    let pairs = [1..] `zip` experts 
        isLast i = i == length pairs
        mkrow (i, a) = (showr i & showr a) <> lnbk <> (if isLast i then mempty else hline)
    in ("Эксперт" & "Количество часов") <> lnbk <> hline
       <> mconcat (mkrow `fmap` pairs)
  )
\end{writehaskell}

\begin{table}[h!]
\centering
\caption{Результат экспертных оценок}
\label{table:org_experts}
\hatex{expertsTabular}
\end{table}

Тогда ожидаемая продолжительность определяется по формуле~\ref{equation:expertsExpected}.
\begin{writehaskell}
-- | Длительность рабочего дня
workDay :: Int
workDay = 8

-- | Минимальная, максимальная и ожидаемая оценка экспертов
expertsMin, expertsMax, expertsExpected, expertsExpectedDays :: Int
expertsMin = minimum experts
expertsMax = maximum experts
expertsExpected = round (fromIntegral (3 * expertsMin + 2 * expertsMax) / 5)
expertsExpectedDays = ceiling (fromIntegral expertsExpected / fromIntegral workDay)
\end{writehaskell}
\begin{equation}
\label{equation:expertsExpected}
t_{\text{ож}} = \frac{3 T_{min} + 2 T_{max} }{5} = \frac{3 \cdot \hatex{showr expertsMin} + 2 \cdot \hatex{showr expertsMax} }{5} = \hatex{showr expertsExpected} \, \text{часов}
\end{equation}

Затраты труда на программирование выражаются формулой~\ref{equation:programmingTime}.
\begin{writehaskell}
designCostFactor, testCostFactor, fixCostFactor, docCostFactor, testDocCostFactor, totalCostFactor :: Float
designCostFactor = 0.2
testCostFactor = 0.15
fixCostFactor = 0.15
docCostFactor = 0.15
testDocCostFactor = testCostFactor + fixCostFactor + docCostFactor
totalCostFactor = designCostFactor + 1 + testDocCostFactor

designTime, programmingTime, testDocTime, testTime, fixTime, docTime :: Int 
programmingTime = round (fromIntegral expertsExpected / totalCostFactor)
designTime = round (designCostFactor * fromIntegral programmingTime)
testTime = round (testCostFactor * fromIntegral programmingTime)
fixTime = round (fixCostFactor * fromIntegral programmingTime)
docTime = round (docCostFactor * fromIntegral programmingTime)
testDocTime = testTime + fixTime + docTime

\end{writehaskell}
\begin{equation}
\label{equation:programmingTime}
Q_{progr} = t_1 + t_2 + t_3
\end{equation}
\begin{ESKDexplanation}
\item[где ] $t_1$ -- время на проектирование системы;
\item       $t_2$ -- время на написание программы;
\item       $t_3$ -- время на проведение тестирования, исправлений и написание документации (определяется формулой~\ref{equation:testDocTime}).
\end{ESKDexplanation}

Коэффициент затрат на проектирование определим равным $n_1 = \hatex{showf designCostFactor}$. Тогда затраты на проектирование выражаются формулой~\ref{equation:designTime}.
\begin{equation}
\label{equation:designTime}
t_1 = n_1 \cdot t_2 = \hatex{showf designCostFactor} \cdot t_2
\end{equation}

А затраты на проектирование выражаются формулой~\ref{equation:testDocTime}.
\begin{equation}
\label{equation:testDocTime}
t_3 = n_i \cdot t_2 = (n_\text{т} + n_\text{и} + n_\text{д}) t_2 = (\hatex{showf testCostFactor} + \hatex{showf fixCostFactor} + \hatex{showf docCostFactor}) t_2 = \hatex{showf testDocCostFactor} \cdot t_2
\end{equation}
\begin{ESKDexplanation}
\item[где ] $n_i$ -- интегральные коэффициент затрат на тестирование, исправление и написание документации;
\item       $n_\text{т}$ -- коэффициент затрат на тестирование программы;
\item       $n_\text{и}$ -- коэффициент затрат на исправление программы;
\item       $n_\text{д}$ -- коэффициент затрат на документирование программы.
\end{ESKDexplanation}

Используя формулы \ref{equation:designTime} и \ref{equation:testDocTime}:
\begin{equation}
\label{equation:programmingTime2}
Q_{progr} = t_1 + t_2 + t_3 = (\hatex{showf designCostFactor} + 1 + \hatex{showf testDocCostFactor}) \cdot t_2 = \hatex{showf totalCostFactor} \cdot t_2
\end{equation}

Отсюда находим затраты труда на программирование:
\begin{equation}
\label{equation:programmingTime3}
t_2 = \frac{Q_{progr}}{\hatex{showf totalCostFactor}} = \frac{\hatex{showr expertsExpected}}{\hatex{showf totalCostFactor}} = \hatex{showr programmingTime} \, \text{часов}
\end{equation}

Далее можно расчитать все затраты труда:
\begin{equation}
\label{equation:designTime2}
t_1 = n_1 \cdot t_2 = \hatex{showf designCostFactor} \cdot t_2 = \hatex{showf designCostFactor} \cdot \hatex{showr programmingTime} = \hatex{showr designTime} \, \text{часов}
\end{equation}

Время тестирования расчитывается по следующей формуле:
\begin{equation}
\label{equation:testTime}
t_\text{т} = n_\text{т} \cdot t_2 = \hatex{showf testCostFactor} \cdot t_2 = \hatex{showf testCostFactor} \cdot \hatex{showr programmingTime} = \hatex{showr testTime} \, \text{часов}
\end{equation}

Время исправления ошибок расчитывается по следующей формуле:
\begin{equation}
\label{equation:fixTime}
t_\text{и} = n_\text{и} \cdot t_2 = \hatex{showf fixCostFactor} \cdot t_2 = \hatex{showf fixCostFactor} \cdot \hatex{showr programmingTime} = \hatex{showr fixTime} \, \text{часов}
\end{equation}

Время написания документации расчитывается по следующей формуле:
\begin{equation}
\label{equation:docTime}
t_\text{д} = n_\text{д} \cdot t_2 = \hatex{showf docCostFactor} \cdot t_2 = \hatex{showf docCostFactor} \cdot \hatex{showr programmingTime} = \hatex{showr docTime} \, \text{часов}
\end{equation}

Суммарное время на тестирование, исправление ошибок и написание документации расчитывается по следующей формуле:
\begin{equation}
\label{equation:testDocTime3}
t_3 = t_\text{т} + t_\text{и} + t_\text{д} = (\hatex{showr testTime} + \hatex{showr fixTime} + \hatex{showr docTime}) \cdot \hatex{showr programmingTime} = \hatex{showr testDocTime} \, \text{часов}
\end{equation}

Запишем итоговую оценку труда в часах и человеко-дней (примем \hatex{showr workDay} часов в одном рабочем дне):
\begin{equation}
\label{equation:programmingTime3}
Q_{progr} = \hatex{showr expertsExpected} \, \text{часов} = \hatex{showr expertsExpectedDays} \, \text{человеко-дней}
\end{equation}

%===========================================================================
\clearpage
\addcontentsline{toc}{chapter}{\bibname}
\bibliographystyle{utf8gost705u}  %% стилевой файл для оформления по ГОСТу
\bibliography{biblio}     %% имя библиографической базы (bib-файла) 

\end{document}