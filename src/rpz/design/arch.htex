\begin{haskellpragmas}
{-# LANGUAGE OverloadedStrings #-}
\end{haskellpragmas}
\begin{writehaskell}
import Common

weightedServ f = f [
    ("Платформа", 0.2)
  , ("Поддержка интерфейсов", 0.2)
  , ("Быстродействие", 0.3)
  , ("Надёжность", 0.2)
  , ("Распространённость", 0.1)]
  [ ("Apache 2.4",       [5, 4, 3, 3, 5])
  , ("Warp 3.2.3",   [5, 5, 5, 5, 3])]

weightedClientLang f = f [
    ("Простота разработки", 0.3)
  , ("Производительность", 0.3)
  , ("Cообщество", 0.2)
  , ("Риски проектирования", 0.2)] 
  [ ("JavaScript", [2, 5, 5, 5])
  , ("Haskell",    [5, 2, 4, 5])
  , ("PureScript", [4, 4, 3, 3])
  , ("Elm",        [3, 4, 4, 2])]

weightedServerDB f = f [
    ("Интеграция c Haskell", 0.3)
  , ("Производительность", 0.2)
  , ("Качество документации", 0.1)
  , ("Распространённость", 0.1)
  , ("Масштабируемость", 0.2)
  , ("Возможности языка запросов", 0.0) ]
  [ ("PostgreSQL", [5, 5, 4, 5, 3, 5])
  , ("MySQL",      [5, 3, 2, 4, 2, 3])
  , ("MongoDB",    [4, 4, 4, 5, 5, 4])
  , ("Acid-State", [5, 4, 4, 1, 3, 5]) ]

\end{writehaskell}

\subsubsection{Разработка архитектуры АИС} 

\paragraph{Выбор языка программирования}

Для разработки системы был выбран язык программирования Haskell.

Haskell -- стандартизированный чистый функциональный язык программирования общего назначения.

Особенности языка Haskell

\begin{itemize}
\item функциональная парадигма программирования
\item строгая статическая типизация
\item автоматический вывод типов
\item ленивые вычисления
\item большое количество готовых библиотек 
\item чистота языка
\end{itemize}

\paragraph{Выбор web-сервера}

\subparagraph{Критерии}

В качестве критериев выбора web-сервера используются:
\begin{itemize}

\item Платформа -- количество и распространёность операционных систем на которых доступен сервер
\item Поддержка интерфейсов -- программные интерфейсы, поддерживаемые сервером
\item Быстродействие -- быстродействие
\item Надёжность -- надёжность
\item Распространённость -- доля сервера на рынке серверных решений, удобство развёртывания.

\end{itemize}

Критерием соответствуют веса:
\begin{table}[h!]
\centering
\caption{Критерии выбора сервера и их весовые коэффициенты}
\label{table:servCritWeights}
\begin{tabular}{L{10cm}|C{3cm}}
\multicolumn{1}{C{10cm}|}{Критерий} & 
\multicolumn{1}{C{3cm}}{$\alpha$} \\
\hline\hline

Платформа & 0.2 \\
Поддержка интерфейсов & 0.2 \\
Быстродействие & 0.3 \\
Надёжность & 0.2 \\
Распространённость & 0.1 \\

\end{tabular}
\end{table}

Выполнено следующее условие:
\begin{equation}
\sum \alpha_i = 0.2 + 0.2 + 0.3 + 0.2 + 0.1 = 1
\end{equation}

\subparagraph{Варианты}

В процессе проектирования были рассмотрены два популярных web-сервера, поддерживающие  язык программирования Haskell: Apache версии 2.4 и Warp 3.2.3. 

Сервер Apache является приложением веб-сервера с открытым исходным кодом, разработанным Apache Software Foundation. Программное обеспечение сервера свободно распространяется и данная лицензия с открытым исходным кодом означает, что пользователи могут отредактировать базовый код, чтобы настроить производительность и способствовать разработке программы.

Основные преимущества Apache:
\begin{itemize}
\item низкие затраты, так как нет необходимости приобретать лицензии на программное обеспечение;
\item гибкое программирование из-за открытого исходного кода;
\item улучшенная безопасность, так как Apache был разработан для операционной системы не-Windows (а большинство вредоносных программ написано под ОС от Microsoft), то он всегда имел репутацию более безопасной системы, чем IIS производства Microsoft.
\end{itemize}

Библиотека Warp является HTTP-движком интерфейса веб-приложений (Web Application Interface - WAI). Она запускает приложения WAI поверх протокола HTTP. Yesod и mighty являются примерами веб-фреймворков, работающих поверх WAI. 

Основные преимущества Warp:
\begin{itemize}
\item высокая производительность;
\item малый объём серверного кода;
\item высокая надёжность.
\end{itemize}

\begin{table}[h!]
\centering
\caption{Таблица <<Варианты>>}
\label{table:servVarCrits}
\begin{tabular}{L{6cm}|L{5cm}|L{5cm}}
\multicolumn{1}{C{6cm}|}{Критерий} & 
\multicolumn{1}{C{5cm}|}{Apache 2.4} &
\multicolumn{1}{C{5cm}}{Warp 3.2.3} \\
\hline\hline

Платформа & Семейство UNIX и семейство Windows & Семейство UNIX и семейство Windows \\ \hline
Поддержка интерфейсов & API, CGI, Fast CGI & API, CGI, Fast CGI, Wai \\ \hline
Быстродействие & Удовлетворительно & Отлично \\ \hline
Надёжность & Удовлетворительно & Отлично \\ \hline
Распространённость & Отлично & Удовлетворительно \\ \hline

\end{tabular}
\end{table}

\subparagraph{Сравнение вариантов} \hfill

\begin{table}[h!]
\centering
\caption{Сравнение вариантов}
\label{table:servChoice}
\hatex{weightedServ weightedSummTabular}
\end{table}

\begin{table}[h!]
\centering
\caption{Сравнение вариантов с нормированными оценками}
\label{table:servChoiceNorm}
\hatex{weightedServ weightedSummTabular'}
\end{table}

Из таблицы~\ref{table:servChoiceNorm} видно, что следует выбрать сервер Warp 3.2.3.

\paragraph{Выбор СУБД} \hfill

После выбора сервера необходимо определиться с СУБД. Выбор производится из следующих вариантов:

\begin{itemize}
\item PostgreSQL -- реляционная СУБД. Преимущества: соответствие стандартам, подробная документация, хорошая масштабируемость. Недостатки: сложность настройки и освоения.
\item MySQL -- реляционная СУБД. Преимущества: простота настройки. Недостатки: несоответствие стандартам, проблемы с репликациями, слабая документация, проблемы с многобайтовыми кодировками.
\item MongoDB -- no-SQL СУБД на основе парадигмы <<ключ-значение>>. Преимущество: легкость масштабирования и простота модели данных. Недостатки: слабый язык запросов и слабая интеграция в Haskell.
\item Acid-State -- no-SQL СУБД, построенная как библиотека на языке Haskell, предоставляющая монадоидический API для управления транзакциями и обработки данных. Основные преимущества: простота и интеграция в Haskell. Недостатки: малоизвестная модель данных и проблемы с масштабированием.
\end{itemize}

В качестве критериев оценки были выбраны:
\begin{itemize}
\item Интеграция с Haskell -- качество библиотек для взаимодействия Haskell и рассматриваемой библиотекой. Для SQL СУБД и MongoDB есть общая библиотека Haskell Persistent.
\item Производительность -- производительность СУБД является <<бутылочным горлышком>> производительности всего приложения.
\item Качество документации -- качество документации напрямую влияет на время, потраченное на тестирование и исправление ошибок.
\item Распространённость -- чем больше распространена СУБД или ее модель хранения данных, тем легче проводить миграции и поддерживать АИС во время эксплуатации.
\item Масштабируемость -- количество трудозатрат для горизонтального масштабирования АИС. Сложности с масштабируемостью всего АИС зачастую упираются в сложность масштабирования СУБД.
\item Возможности языка запросов -- мощный язык запросов позволяет перенести часть нагрузки на СУБД и лучше использовать ресурсы системы.
\end{itemize}

\begin{table}[h!]
\centering
\caption{Сравнение вариантов выбора СУБД}
\label{table:serverDBChoice}
\hatex{weightedServerDB weightedSummTabular}
\end{table}

\begin{table}[h!]
\centering
\caption{Сравнение вариантов выбора СУБД с нормированными оценками}
\label{table:serverDBChoiceNorm}
\hatex{weightedServerDB weightedSummTabular'}
\end{table}

Из таблицы~\ref{table:serverDBChoiceNorm} видно, что лучшим вариантом для серверной библиотеки является PostgreSQL.